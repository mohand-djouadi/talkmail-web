[{"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\index.js":"1","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\App.js":"2","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\context\\ChatContext.js":"3","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Home.jsx":"4","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Signup.jsx":"5","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Chats.jsx":"6","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Signin.jsx":"7","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Agenda.jsx":"8","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Settings.jsx":"9","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Header.jsx":"10","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Mails.jsx":"11","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBar.jsx":"12","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Navbar.jsx":"13","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBarPage.jsx":"14","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\MainSection.jsx":"15","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Button.jsx":"16","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\PageSelectCont.jsx":"17","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBarContact.jsx":"18","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\PageList.jsx":"19","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Empty.jsx":"20","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\forgotPassword.jsx":"21","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EventContent.jsx":"22","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EventForm.jsx":"23","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\FormOTP.jsx":"24","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EventItem.jsx":"25","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\AccountSettingsForm.jsx":"26","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\MailList.jsx":"27","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\context\\ChatLogics.js":"28","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Newmessage.jsx":"29","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBarButton.jsx":"30","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SearchChat.jsx":"31","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ProfileModal.jsx":"32","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\UpdateGroupChatModal.jsx":"33","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EmailDetailsModal.jsx":"34","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ContactInv.jsx":"35","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SingleChat.jsx":"36","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ContactLink.jsx":"37","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ChatBox.jsx":"38","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\UserBadgeItem.jsx":"39","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\UserListItem.jsx":"40","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\GroupChatModal.jsx":"41","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ScrollableChat.jsx":"42"},{"size":196,"mtime":1706822881869,"results":"43","hashOfConfig":"44"},{"size":2537,"mtime":1706823260420,"results":"45","hashOfConfig":"44"},{"size":598,"mtime":1706740978532,"results":"46","hashOfConfig":"44"},{"size":288,"mtime":1702599800773,"results":"47","hashOfConfig":"44"},{"size":8962,"mtime":1706747460458,"results":"48","hashOfConfig":"44"},{"size":577,"mtime":1706740978533,"results":"49","hashOfConfig":"44"},{"size":5873,"mtime":1706747446416,"results":"50","hashOfConfig":"44"},{"size":3154,"mtime":1706747408824,"results":"51","hashOfConfig":"44"},{"size":859,"mtime":1706740978535,"results":"52","hashOfConfig":"44"},{"size":1364,"mtime":1706697562336,"results":"53","hashOfConfig":"44"},{"size":2455,"mtime":1706740978534,"results":"54","hashOfConfig":"44"},{"size":2019,"mtime":1706743648017,"results":"55","hashOfConfig":"44"},{"size":1054,"mtime":1705570643795,"results":"56","hashOfConfig":"44"},{"size":3215,"mtime":1706543573544,"results":"57","hashOfConfig":"44"},{"size":812,"mtime":1706543573532,"results":"58","hashOfConfig":"44"},{"size":501,"mtime":1706740977073,"results":"59","hashOfConfig":"44"},{"size":2500,"mtime":1706741560071,"results":"60","hashOfConfig":"44"},{"size":1111,"mtime":1706353302862,"results":"61","hashOfConfig":"44"},{"size":2323,"mtime":1706371087039,"results":"62","hashOfConfig":"44"},{"size":373,"mtime":1701479307678,"results":"63","hashOfConfig":"44"},{"size":5465,"mtime":1706830958704,"results":"64","hashOfConfig":"44"},{"size":626,"mtime":1706229736175,"results":"65","hashOfConfig":"44"},{"size":5383,"mtime":1706747158478,"results":"66","hashOfConfig":"44"},{"size":1817,"mtime":1706830870670,"results":"67","hashOfConfig":"44"},{"size":1761,"mtime":1706747169147,"results":"68","hashOfConfig":"44"},{"size":8873,"mtime":1706747046403,"results":"69","hashOfConfig":"44"},{"size":8155,"mtime":1706748803504,"results":"70","hashOfConfig":"44"},{"size":1426,"mtime":1706707803655,"results":"71","hashOfConfig":"44"},{"size":3897,"mtime":1706831418505,"results":"72","hashOfConfig":"44"},{"size":225,"mtime":1703102830721,"results":"73","hashOfConfig":"44"},{"size":685,"mtime":1705844495104,"results":"74","hashOfConfig":"44"},{"size":792,"mtime":1706369328012,"results":"75","hashOfConfig":"44"},{"size":5711,"mtime":1706831021766,"results":"76","hashOfConfig":"44"},{"size":4569,"mtime":1706826469080,"results":"77","hashOfConfig":"44"},{"size":2175,"mtime":1706747091583,"results":"78","hashOfConfig":"44"},{"size":7331,"mtime":1706748711361,"results":"79","hashOfConfig":"44"},{"size":368,"mtime":1706042583011,"results":"80","hashOfConfig":"44"},{"size":4796,"mtime":1706747079736,"results":"81","hashOfConfig":"44"},{"size":702,"mtime":1706543573560,"results":"82","hashOfConfig":"44"},{"size":782,"mtime":1706311420709,"results":"83","hashOfConfig":"44"},{"size":4384,"mtime":1706747223539,"results":"84","hashOfConfig":"44"},{"size":1576,"mtime":1706829188717,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1bgz6vr",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"88"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\index.js",[],["195","196"],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\App.js",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\context\\ChatContext.js",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Home.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Signup.jsx",["197","198"],"import React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport Button from '../components/Button';\nimport Img from '../assets/signup-img.png';\nimport Logo from '../assets/Dark.png';\nimport '../styles/signup.css';\nimport { Link, useNavigate } from 'react-router-dom';\n\nfunction Signup({ handleLogin }) {\n  const [firstname, setfirstname] = useState('');\n  const [lastname, setlastname] = useState('');\n  const [dateofbirth, setdateofbirth] = useState('');\n  const [email, setemail] = useState('');\n  const [password, setpassword] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState(false);\n  const navigate = useNavigate();\n  const [securityQuestion, setSecurityQuestion] = useState('');\n  const [securityAnswer, setSecurityAnswer] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [secureMail, setSecureMail] = useState('');\n\n  const [pic, setpic] = useState(\n    'https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg',\n  );\n  const postDetails = (pics) => {\n    setLoading(true);\n    if (pics === undefined) {\n      setLoading(false);\n      return;\n    }\n    if (pics.type === 'image/jpeg' || pics.type === 'image/png') {\n      const data = new FormData();\n      data.append('file', pics);\n      data.append('upload_preset', 'TalkMail');\n      data.append('cloud_name', 'dwgulyxkt');\n      fetch('https://api.cloudinary.com/v1_1/dwgulyxkt/image/upload', {\n        method: 'post',\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setpic(data.url.toString());\n          setLoading(false);\n          // console.log(data.url.toString());\n          localStorage.setItem('profilePicture', data.url.toString());\n        })\n        .catch((err) => {\n          console.log(err);\n          setLoading(false);\n        });\n    } else {\n      setLoading(false);\n      return;\n    }\n  };\n\n  async function addUser() {\n    try {\n      const config = {\n        headers: {\n          'Content-type': 'application/json',\n        },\n      };\n      const response = await axios.post(\n        'https://talkmail-server.onrender.com/api/user',\n        {\n          firstname,\n          lastname,\n          dateofbirth,\n          email,\n          password,\n          secureMail,\n          securityQuestion,\n          securityAnswer,\n          pic,\n        },\n        config,\n      );\n      console.log(response.data)\n      return response.data;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function submit(e) {\n    e.preventDefault();\n    setError(false);\n    setLoading(true);\n\n    if (password !== confirmPassword) {\n      toast.error('Les mots de passe ne correspondent pas.');\n      return;\n    }\n\n    const emailPattern = /^[^\\s@]+@talkmail\\.dz$/;\n    if (!emailPattern.test(email)) {\n      setError(true);\n      toast.error('Veuillez entrer une adresse email valide de talkmail.dz.');\n      setLoading(false);\n      return;\n    }\n\n    const secureMailPattern = /^[^\\s@]+@gmail\\.com$/;\n    if (!secureMailPattern.test(secureMail)) {\n      setError(true);\n      toast.error('Veuillez entrer une adresse email Google (gmail.com)');\n      setLoading(false);\n      return;\n    }\n\n    const passwordPattern = /^(?=.*[A-Z])(?=.*\\d).{8,}$/;\n    if (!passwordPattern.test(password)) {\n      setError(true);\n      toast.error(\n        'Le mot de passe doit comporter au moins 8 caractères, dont au moins une lettre majuscule et un chiffre.',\n      );\n      setLoading(false);\n      return;\n    }\n\n    const userDataPromise = addUser();\n\n    userDataPromise\n      .then((userData) => {\n        sessionStorage.setItem('user', JSON.stringify(userData));\n        const userItem = JSON.parse(sessionStorage.getItem('user'));\n        setIsSubmitted(true);\n\n        toast.success('Inscription réussie ! Bienvenue a Talkmail', {\n          onClose: () => {\n            // console.log(userItem);\n            handleLogin();\n            navigate('/mails/inbox');\n          },\n        });\n      })\n      .catch((error) => {\n        // console.error(error);\n        setError(true);\n        toast.error('Veuillez remplir tous les champs.');\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    if (isSubmitted) {\n      setfirstname('');\n      setlastname('');\n      setdateofbirth('');\n      setemail('');\n      setpassword('');\n      setConfirmPassword('');\n      setSecureMail('');\n      setSecurityQuestion('');\n      setSecurityAnswer('');\n      setpic('');\n    }\n  }, [isSubmitted]);\n\n  return (\n    <div className=\"signup-container\">\n      <div className=\"left-section\">\n        <div className=\"logo-signup\">\n          <Link to=\"/index.html\">\n            <img src={Logo} alt=\"logo\" />\n          </Link>\n        </div>\n        <div className=\"img-signup\">\n          <img src={Img} alt=\"signup-img\"></img>\n        </div>\n      </div>\n      <div className=\"right-section\">\n        <h1 className=\"sign-title-signin\">Inscription</h1>\n        <br></br>\n        <p className=\"sign-description-signup\">\n          Commençons votre aventure avec TalkMail.\n        </p>\n        <br></br>\n        <form>\n          <div className=\"auth-form-signup\">\n            <input\n              className=\"input-style\"\n              type=\"text\"\n              placeholder=\"Entrez votre prénom\"\n              required\n              value={firstname}\n              onChange={(e) => setfirstname(e.target.value)}\n            ></input>\n\n            <input\n              className=\"input-style\"\n              type=\"text\"\n              placeholder=\"Entrez votre nom\"\n              value={lastname}\n              onChange={(e) => setlastname(e.target.value)}\n            ></input>\n            <input\n              className=\"input-style\"\n              type=\"date\"\n              placeholder=\"enter your date of birth\"\n              value={dateofbirth}\n              onChange={(e) => setdateofbirth(e.target.value)}\n            ></input>\n            <input\n              className=\"input-style\"\n              type=\"email\"\n              placeholder=\"Entrez votre talkmail email \"\n              value={email}\n              onChange={(e) => setemail(e.target.value)}\n            ></input>\n            <br></br>\n            <input\n              className=\"input-style\"\n              type=\"password\"\n              placeholder=\"Entrez votre mot de passe\"\n              value={password}\n              onChange={(e) => setpassword(e.target.value)}\n            ></input>\n            <input\n              className=\"input-style\"\n              type=\"password\"\n              placeholder=\"Confirmez votre mot de passe\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></input>\n            <input\n              className=\"input-style\"\n              type=\"email\"\n              placeholder=\"Entrez votre e-mail de secours (Gmail) \"\n              value={secureMail}\n              onChange={(e) => setSecureMail(e.target.value)}\n            ></input>\n            <br></br>\n            <select\n              className=\"input-style\"\n              required\n              value={securityQuestion}\n              onChange={(e) => setSecurityQuestion(e.target.value)}\n            >\n              <option value=\"\">Choisissez une question</option>\n              <option value=\"Quel est le nom de votre premier animal de compagnie ?\">\n                Quel est le nom de votre premier animal de compagnie ?\n              </option>\n              <option value=\"Quel est le nom de votre ensegniant préferé ?\">\n                Quel est le nom de votre ensegniant préferé ?\n              </option>\n              <option value=\"Quel est l'adresse de votre maison d'enfance ?\">\n                Quel est l'adresse de votre maison d'enfance ?\n              </option>\n            </select>\n            <br></br>\n            <input\n              className=\"input-style\"\n              type=\"text\"\n              placeholder=\"enter your security question answer\"\n              required\n              value={securityAnswer}\n              onChange={(e) => setSecurityAnswer(e.target.value)}\n            ></input>\n            <br></br>\n            <input\n              className=\"file-input-style\"\n              placeholder=\"Charger votre photo de profil\"\n              type=\"file\"\n              p={1.5}\n              accept=\"image/*\"\n              onChange={(e) => postDetails(e.target.files[0])}\n            />\n            <br></br>\n            <br></br>\n            <Button\n              CustomClass=\"signup-btn\"\n              disabled={loading}\n              btnText={loading ? 'Signing Up...' : \"S'inscrire\"}\n              onClick={submit}\n            />\n          </div>\n        </form>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default Signup;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Chats.jsx",["199"],"import React from 'react';\nimport SideBarPage from '../components/SideBarPage';\nimport SideBarContact from '../components/SideBarContact';\nimport PageList from '../components/PageList';\nimport PageSelectCont from '../components/PageSelectCont';\n\nfunction Chats() {\n  return (\n    <div\n      className=\"page\"\n      style={{\n        marginLeft: 85,\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'row',\n      }}\n    >\n      <SideBarContact />\n      <PageList />\n      <PageSelectCont message=\"select contact\" />\n    </div>\n  );\n}\n\nexport default Chats;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Signin.jsx",["200","201","202","203"],"import React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Button from '../components/Button';\nimport main from '../assets/ab.png';\nimport Logo from '../assets/Dark.png';\nimport '../styles/signin.css';\nimport ForgotPassword from '../components/forgotPassword';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport FormOTP from '../components/FormOTP';\n\nfunction Signin({ handleLogin }) {\n  const [email, setemail] = useState('');\n  const [password, setpassword] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState(false);\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [openOtp, setOpenOtp] = useState(false);\n  const [currentOtp, setCurrentOtp] = useState(0);\n  const [openReset, setOpenReset] = useState(false);\n\n  const handleOpenReset = () => {\n    setOpenReset(true);\n  };\n\n  const handleCloseReset = () => {\n    setOpenReset(false);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpenOtp = () => {\n    setOpenOtp(true);\n  };\n\n  const handleCloseOtp = () => {\n    setOpenOtp(false);\n  };\n\n  const profilePictureUrl =\n    localStorage.getItem('profilePicture') || 'default-url';\n\n  const Notify = (message, callback) => {\n    toast.success(message, {\n      onClose: callback,\n    });\n  };\n\n  async function LoadUser() {\n    try {\n      const config = {\n        headers: {\n          'Content-type': 'application/json',\n        },\n      };\n      const response = await axios.post(\n        'https://talkmail-server.onrender.com/api/user/signin',\n        {\n          email,\n          password,\n        },\n        config,\n      );\n      return response.data;\n    } catch (e) {\n      // console.log(e);\n      setError(true);\n      setemail('');\n      setpassword('');\n      throw e; // Re-throw the error for the calling function (submit) to catch\n    }\n  }\n\n  async function submit(e) {\n    e.preventDefault();\n    setError(false);\n\n    try {\n      const userData = await LoadUser();\n\n      if (!userData.twoFA) {\n        sessionStorage.setItem('user', JSON.stringify(userData));\n\n        setIsSubmitted(true);\n        Notify('Connexion réussie !', () => {\n          handleLogin();\n          navigate('/mails/inbox');\n        });\n      } else {\n        sessionStorage.setItem('user', JSON.stringify(userData));\n\n        setIsSubmitted(true);\n        setCurrentOtp(userData.generatedOTP);\n        handleOpenOtp();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      toast.error('Adresse ou Mot de passe incorrect.');\n    }\n  }\n\n  useEffect(() => {\n    if (isSubmitted) {\n      setemail('');\n      setpassword('');\n    }\n  }, [isSubmitted]);\n\n  return (\n    <div className=\"signin-container\">\n      <div className=\"left-section-signin\">\n        <div className=\"logo-signup\">\n          <Link to=\"/index.html\">\n            <img src={Logo} alt=\"logo\" />\n          </Link>\n        </div>\n        <div className=\"img-signin\">\n          <img src={main} alt=\"signin-img\"></img>\n        </div>\n      </div>\n      <div className=\"right-section-signin\">\n        <h1 className=\"sign-title-signin\"> Connexion</h1>\n        <br></br>\n        <p className=\"sign-description-signin\"> Bienvenue à TalkMail !</p>\n        <form onSubmit={(e) => submit(e)}>\n          <div className=\"auth-form-signin\">\n            <br></br>\n            <input\n              className=\"input-style\"\n              type=\"text\"\n              placeholder=\"Saisissez votre adresse TalkMail\"\n              onChange={(e) => setemail(e.target.value)}\n              required\n            ></input>\n            <br></br>\n            <br></br>\n            <div className=\"password-input-container\">\n              <div\n                className=\"eye-icon\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                <FontAwesomeIcon\n                  icon={showPassword ? faEye : faEyeSlash}\n                  className=\"eye-icon-inner\"\n                />\n              </div>\n              <input\n                className=\"input-style\"\n                type={showPassword ? 'text' : 'password'}\n                placeholder=\"Saisissez votre mot de passe\"\n                onChange={(e) => setpassword(e.target.value)}\n                required\n              />\n            </div>\n\n            <div className=\"forgot-password-link\">\n              <span\n                className=\"forgot-password\"\n                style={{\n                  color: 'spacegrey',\n                  cursor: 'pointer',\n                  textDecoration: 'underline',\n                }}\n                onClick={handleClickOpen}\n              >\n                Forgot Password?\n              </span>\n            </div>\n            <br></br>\n            <br></br>\n            <Button\n              btnText=\"Se connecter\"\n              onClick={submit}\n              CustomClass=\"signin-btn\"\n            />\n          </div>\n        </form>\n        <ToastContainer />\n      </div>\n\n      {openOtp && (\n        <div>\n          <FormOTP\n            handleCloseOtp={handleCloseOtp}\n            currentOtp={currentOtp}\n            handleLogin={handleLogin}\n            Notify={Notify}\n          />\n        </div>\n      )}\n\n      {open && (\n        <div>\n          <ForgotPassword\n            handleClose={handleClose}\n            handleOpenReset={handleOpenReset}\n            Notify={Notify}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Signin;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Agenda.jsx",["204","205","206"],"import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport '../styles/calendar.css';\nimport '../styles/Agenda.css';\nimport noEvents from '../assets/noEvents.png';\nimport moment from 'moment';\nimport EventForm from '../components/EventForm';\nimport Empty from '../components/Empty';\nimport { useQuery } from 'react-query';\nimport axios from 'axios';\nimport EventItem from '../components/EventItem';\nimport EventContent from '../components/EventContent';\n\nfunction Agenda() {\n  const [date, setDate] = useState(new Date());\n  const [evenements, setEvenements] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [eventToUpdate, setEventToUpdate] = useState(null);\n\n  const handleEvent = (event) => {\n    setSelectedEvent(event);\n  };\n\n  const user = JSON.parse(sessionStorage.getItem('user'));\n\n  const {\n    data: eventsData,\n    isLoading,\n    isError,\n  } = useQuery('events', async () => {\n    const response = await axios.get(\n      'https://talkmail-server.onrender.com/api/agenda/events',\n      {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n    return response.data;\n  });\n  const events = eventsData || [];\n\n  useEffect(() => {\n    setEvenements(events);\n  }, [events]);\n\n  useEffect(() => {\n    setSelectedEvent(null);\n  }, [eventToUpdate]);\n\n  if (isLoading) {\n    return <div>Chargement en cours...</div>;\n  }\n\n  if (isError) {\n    return <div>Erreur lors du chargement des conversation</div>;\n  }\n  // console.log('selectedEvent',selectedEvent)\n  return (\n    <div\n      className=\"page\"\n      style={{\n        marginLeft: 85,\n        display: 'flex',\n        flexDirection: 'row',\n        height: '100vh',\n        color: 'white',\n      }}\n    >\n      <div\n        style={{\n          borderRight: '2px solid #AEEFEB',\n        }}\n      >\n        <div className=\"calendar-box\">\n          <Calendar value={date} onChange={setDate} />\n        </div>\n        <div className=\"events-list\">\n          {events.length === 0 ? (\n            <Empty\n              image={noEvents}\n              message=\"you have no events\"\n              height={65}\n              width={65}\n            />\n          ) : (\n            evenements.map((event) => (\n              <EventItem\n                key={event._id}\n                id={event._id}\n                title={event.title}\n                date={event.startDate}\n                object={event}\n                setSelectedEvent={setSelectedEvent}\n                setEventToUpdate={setEventToUpdate}\n                evenements={evenements}\n                setEvenements={setEvenements}\n              />\n            ))\n          )}\n        </div>\n      </div>\n      {selectedEvent === null ? (\n        <EventForm\n          date={date}\n          eventToUpdate={eventToUpdate}\n          evenements={evenements}\n          setEvenements={setEvenements}\n        />\n      ) : (\n        <EventContent selectedEvent={selectedEvent} />\n      )}\n    </div>\n  );\n}\n\nexport default Agenda;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Settings.jsx",["207","208","209","210"],"import React, { useState } from 'react';\nimport SideBarPage from '../components/SideBarPage';\nimport AccountSettingsForm from '../components/AccountSettingsForm';\nimport PageList from '../components/PageList';\n\nfunction Settings({ handleLogout }) {\n  const [currentSettings, setCurrentSettings] = useState('Parametre de compte');\n\n  const user = JSON.parse(sessionStorage.getItem('user'));\n\n  return (\n    <div\n      className=\"page\"\n      style={{\n        marginLeft: 85,\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'row',\n      }}\n    >\n      {/* <SideBarPage\n        elements={['']}\n        path=\"settings\"\n        setCurrentSettings={setCurrentSettings}\n      /> */}\n\n      <AccountSettingsForm\n        handleLogout={handleLogout}\n        currentSettings={currentSettings}\n      />\n    </div>\n  );\n}\n\nexport default Settings;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Header.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\pages\\Mails.jsx",["211","212","213","214"],"import React, { useState } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport SideBarPage from '../components/SideBarPage';\nimport PageList from '../components/PageList';\nimport PageSelectCont from '../components/PageSelectCont';\nimport MailList from '../components/MailList';\n\nfunction Mails() {\n  const [showNewMessage, setShowNewMessage] = useState(false);\n  const [showNewMail, setShowNewMail] = useState(false);\n  const [currentMailBox, setCurrentMailBox] = useState('inbox');\n  const [selectedEmail, setSelectedEmail] = useState(null);\n  const [isEmailModalOpen, setIsEmailModalOpen] = useState(false);\n  const [reply, setReply] = useState(null);\n  const [fwd, setFwd] = useState(null);\n  const [star, setStar] = useState(null);\n  const [bin, setBin] = useState(null);\n  const [imp, setImp] = useState(null);\n\n  const showNewMessageForm = () => {\n    setShowNewMessage(!showNewMessage);\n  };\n\n  const showNewMailList = () => {\n    setShowNewMail(!showNewMail);\n  };\n\n  const openEmailModal = (email) => {\n    setSelectedEmail(email);\n    setIsEmailModalOpen(true);\n  };\n\n  const closeEmailModal = () => {\n    setIsEmailModalOpen(false);\n    setSelectedEmail(null);\n  };\n\n  const user = JSON.parse(sessionStorage.getItem('user'));\n\n  return (\n    <div\n      className=\"page\"\n      style={{\n        marginLeft: 85,\n        height: '100vh',\n        backgroundColor: '#fff',\n        display: 'flex',\n        flexDirection: 'row',\n      }}\n    >\n      <SideBarPage\n        elements={['inbox', 'outbox', 'important', 'starred', 'drafts', 'bin']}\n        path=\"mails\"\n        showNewMessageForm={showNewMessageForm}\n        showNewMailList={showNewMailList}\n        setCurrentMailBox={setCurrentMailBox}\n      />\n      <MailList\n        currentMailBox={currentMailBox}\n        openEmailModal={openEmailModal}\n        star={star}\n        setStar={setStar}\n        bin={bin}\n        setBin={setBin}\n        emailInfo={selectedEmail}\n        imp={imp}\n        setImp={setImp}\n      />\n      <PageSelectCont\n        message=\"select mail to read\"\n        showNewMessage={showNewMessage}\n        selectedEmail={selectedEmail}\n        isEmailModalOpen={isEmailModalOpen}\n        closeEmailModal={closeEmailModal}\n        setShowNewMessage={setShowNewMessage}\n        reply={reply}\n        setReply={setReply}\n        fwd={fwd}\n        setFwd={setFwd}\n        imp={imp}\n        setImp={setImp}\n      />\n    </div>\n  );\n}\n\nexport default Mails;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBar.jsx",["215","216","217","218"],"import mail from '../assets/mail.png';\nimport setting from '../assets/setting.png';\nimport calendar from '../assets/calendar.png';\nimport messages from '../assets/messages.png';\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\nimport { NavLink, matchPath, useLocation } from 'react-router-dom';\nimport '../styles/Sidebar.css';\n\nfunction SideBar() {\n  const profilePicture = localStorage.getItem('profilePicture');\n  const user = JSON.parse(sessionStorage.getItem('user'));\n  const loc = useLocation();\n\n  return (\n    <aside>\n      <div className=\"profile\">\n        {' '}\n        <img\n          src={profilePicture}\n          alt=\"User Picture\"\n          width=\"60\"\n          height=\"60\"\n          style={{ borderRadius: 50, margin: '2rem 0 0 0.8rem' }}\n        />\n      </div>\n      <div className=\"navigate\">\n        <ul>\n          <li>\n            <NavLink\n              to=\"/mails/inbox\"\n              className={loc.pathname.startsWith('/mails') ? 'active' : ''}\n            >\n              <img src={mail} alt=\"mail-icon\" width={25} height={25} />\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/chats\"\n              className={loc.pathname.startsWith('/chats') ? 'active' : ''}\n            >\n              <img src={messages} alt=\"messages-icon\" width={25} height={25} />\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/agenda\"\n              className={loc.pathname.startsWith('/agenda') ? 'active' : ''}\n            >\n              <img src={calendar} alt=\"calendar-icon\" width={25} height={25} />\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/settings/\"\n              className={loc.pathname.startsWith('/settings') ? 'active' : ''}\n            >\n              <img src={setting} alt=\"setting-icon\" width={25} height={25} />\n            </NavLink>\n          </li>\n          \n        </ul>\n      </div>\n    </aside>\n  );\n}\nexport default SideBar;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Navbar.jsx",["219"],"import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Logo from '../assets/Dark.png';\nimport '../styles/Navbar.css';\nimport Button from '../components/Button'; // Assurez-vous que votre composant Button est correctement défini\n\nfunction Navbar(props) {\n  const location = useLocation();\n  const CustomClass = props.CustomClass || '';\n\n  return (\n    <div className={`navbar ${CustomClass}`}>\n      <div className=\"logo\">\n        <Link to=\"/index.html\">\n          <img src={Logo} alt=\"light-mode\" />\n        </Link>\n      </div>\n      <nav className=\"btn-link\">\n        <ul className=\"list-btn\">\n          <li>\n            <Button\n              btnLink=\"/signin\"\n              btnText=\"Se connecter\"\n              CustomClass=\"button-link2\"\n            />\n          </li>\n          <li>\n            <Button\n              btnLink=\"/signup\"\n              btnText=\"Créer un compte\"\n              CustomClass=\"button-link1\"\n            />\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\nexport default Navbar;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBarPage.jsx",["220","221","222","223","224","225","226","227","228","229","230","231"],"import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../styles/SideBarPage.css';\nimport Button from '../components/Button';\nimport SearchChat from './SearchChat';\nimport noConver from '../assets/noConvers.png';\nimport Empty from './Empty';\nimport NewMessage from '../components/Newmessage';\nimport '../styles/mails.css';\nimport SideBarButton from './SideBarButton';\nimport star from '../assets/star.png';\nimport imp from '../assets/imp.png';\nimport out from '../assets/outbox.png';\nimport inbx from '../assets/inbox.png';\nimport draft from '../assets/drft.png';\nimport corbeille from '../assets/bin.png';\nimport InboxIcon from '@mui/icons-material/Inbox';\nimport OutboxIcon from '@mui/icons-material/Outbox';\nimport DrawIcon from '@mui/icons-material/Draw';\nimport FolderSpecialIcon from '@mui/icons-material/FolderSpecial';\nimport AutoDeleteIcon from '@mui/icons-material/AutoDelete';\nimport DeleteSweepIcon from '@mui/icons-material/DeleteSweep';\nimport StarRateIcon from '@mui/icons-material/StarRate';\nimport CollectionsBookmarkIcon from '@mui/icons-material/CollectionsBookmark';\nimport NotificationImportantIcon from '@mui/icons-material/NotificationImportant';\n\nfunction SideBarPage({\n  elements,\n  path,\n  showNewMessage,\n  showNewMessageForm,\n  setCurrentMailBox,\n  setCurrentSettings,\n}) {\n  const mailboxIcons = {\n    inbox: (\n      // <InboxIcon fontSize=\"small\" color=\"primary\" style={{ color: 'white' }} />\n      <InboxIcon fontSize=\"small\" style={{ color: 'white' }} />\n    ),\n    outbox: (\n      <OutboxIcon fontSize=\"small\" color=\"primary\" style={{ color: 'white' }} />\n    ),\n    important: (\n      <CollectionsBookmarkIcon\n        fontSize=\"small\"\n        color=\"primary\"\n        style={{ color: 'white' }}\n      />\n    ),\n    starred: (\n      <StarRateIcon\n        fontSize=\"small\"\n        color=\"primary\"\n        style={{ color: 'white' }}\n      />\n    ),\n    drafts: (\n      <DrawIcon fontSize=\"small\" color=\"primary\" style={{ color: 'white' }} />\n    ),\n    bin: (\n      <DeleteSweepIcon\n        fontSize=\"small\"\n        color=\"primary\"\n        style={{ color: 'white' }}\n      />\n    ),\n  };\n\n  return (\n    <div className=\"side-bar-page\">\n      {path === 'mails' && (\n        <SideBarButton text=\"Nouveau Message\" onClick={showNewMessageForm} />\n      )}\n      {path === 'chats' && <SearchChat />}\n      {(path === 'chats' || elements.length === 0) && !showNewMessage ? (\n        <Empty\n          image={noConver}\n          message=\"you have no contact\"\n          width={85}\n          height={85}\n        />\n      ) : (\n        <nav>\n          {elements.map((item, index) => (\n            <NavLink\n              to={`/${path}/${item}`}\n              key={`${index}-${item}`}\n              className=\"nav-item\"\n              onClick={() => setCurrentMailBox(item)}\n              style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around' }}\n            >\n              {mailboxIcons[item]}\n              {item}\n            </NavLink>\n          ))}\n        </nav>\n      )}\n\n      {path === 'chats' && !showNewMessage && (\n        <SideBarButton text=\"Ajouter Conversation\" />\n      )}\n    </div>\n  );\n}\n\nexport default SideBarPage;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\MainSection.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Button.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\PageSelectCont.jsx",["232"],"import Empty from './Empty';\nimport noSelect from '../assets/noSelected.png';\nimport Newmessage from './Newmessage';\nimport '../styles/PageSelectCont.css';\nimport { useContext } from 'react';\nimport { ChatState } from '../context/ChatContext';\nimport SingleChat from './SingleChat';\nimport { useLocation } from 'react-router-dom';\nimport ProfileModal from './ProfileModal';\nimport { getSenderFull } from '../context/ChatLogics';\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport EmailDetailsModal from './EmailDetailsModal';\n\nfunction PageSelectCont({\n  fetchAgain,\n  setFetchAgain,\n  message,\n  showNewMessage,\n  showNewMessageForm,\n  isEmailModalOpen,\n  closeEmailModal,\n  setShowNewMessage,\n  setReply,\n  reply,\n  fwd,\n  setFwd,\n  selectedEmail,\n}) {\n  const { selectedChat, user } = useContext(ChatState);\n  let locat = useLocation().pathname;\n  let part = locat.split('/');\n  if (part[1] === 'chats') {\n    return (\n      <div\n        // className=\"page-list\"\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          paddingTop: 0,\n          width: '45vw',\n        }}\n      >\n        {selectedChat ? (\n          !selectedChat.isGroupChat ? (\n            <ProfileModal user={getSenderFull(user, selectedChat.users)} />\n          ) : (\n            <UpdateGroupChatModal\n              fetchAgain={fetchAgain}\n              setFetchAgain={setFetchAgain}\n            />\n          )\n        ) : (\n          <Empty image={noSelect} message={message} width={180} height={180} />\n        )}\n      </div>\n    );\n  } else\n    return (\n      <div\n        className=\"page-content\"\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          padding: '34px 65px',\n        }}\n      >\n        {showNewMessage ? (\n          <Newmessage reply={reply} fwd={fwd} />\n        ) : (\n          <>\n            {selectedEmail ? (\n              <EmailDetailsModal\n                emailInfo={selectedEmail}\n                isModalOpen={isEmailModalOpen}\n                handleClose={closeEmailModal}\n                setReply={setReply}\n                setShowNewMessage={setShowNewMessage}\n                setFwd={setFwd}\n              />\n            ) : (\n              <Empty\n                image={noSelect}\n                message={message}\n                width={180}\n                height={180}\n              />\n            )}\n          </>\n        )}\n      </div>\n    );\n}\nexport default PageSelectCont;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBarContact.jsx",["233","234","235","236","237","238","239","240","241","242","243"],"import { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SideBarButton from './SideBarButton';\nimport SearchChat from './SearchChat';\nimport ContactInv from './ContactInv';\nimport noConvers from '../assets/noConvers.png';\nimport userIcon from '../assets/user.png'\nimport '../styles/SideBarContact.css';\nimport ContactLink from './ContactLink'\nimport Empty from './Empty';\nimport { useQuery } from 'react-query'; // useQuery pour le GET, useMutate c pr POST PUT DELETE\nimport React, { memo } from 'react'; // React.memo sert a ne pas faire de re render bla lma3na ;p\nimport { ChatState } from '../context/ChatContext';\nimport ChatBox from './ChatBox';\n\nfunction SideBarContact() {\n  const { chats } = useContext(ChatState);\n  const [fetchAgain, setFetchAgain] = useState(false);\n  \n  return (\n    <div className=\"side-bar-contact\">\n      {chats ? (\n        <ChatBox className=\"contact-nav\" fetchAgain={fetchAgain}></ChatBox>\n      ) : (\n        <Empty message=\"Select a user to start\" width={290} height={290} />\n      )}\n      \n    </div>\n  );\n}\nexport default SideBarContact;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\PageList.jsx",["244","245","246","247","248"],"import { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport Empty from './Empty';\nimport noMails from '../assets/noMails.png';\nimport noFiles from '../assets/noFiles.png';\nimport noContact from '../assets/noContact.png';\nimport '../styles/PageList.css';\nimport MailList from '../components/MailList';\nimport ChatBox from './ChatBox';\nimport { useContext } from 'react';\nimport ChatContext, { ChatState } from '../context/ChatContext';\nimport SingleChat from './SingleChat';\n\nfunction PageList(showNewMail, showNewMailList, currentMailBox) {\n  // console.log('test', { showNewMail, showNewMailList, currentMailBox });\n  let locat = useLocation().pathname;\n  let part = locat.split('/');\n  const { chats, selectedChat } = useContext(ChatState);\n  if (part[1] === 'mails') {\n    return (\n      <div\n        className=\"page-list\"\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          paddingTop: 45,\n        }}\n      >\n        {showNewMail ? (\n          <MailList currentMailBox={showNewMail.currentMailBox} />\n        ) : (\n          <Empty\n            image={noMails}\n            message=\"you have no mail here\"\n            width={290}\n            height={290}\n          />\n        )}\n      </div>\n    );\n  } else if (part[1] === 'files') {\n    return (\n      <div\n        className=\"page-list\"\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          paddingTop: 45,\n        }}\n      >\n        <Empty\n          image={noFiles}\n          message=\"you have no files here\"\n          width={290}\n          height={290}\n        />\n      </div>\n    );\n  } else if (part[1] === 'chats') {\n    return (\n      <div\n        // className=\"page-list\"\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          width: '100vw',\n          padding: ' 5rem 0 0 0',\n          margin: ' 4rem 0 0 0',\n          width: '90vw',\n          borderRight: '2px solid #aeefeb',\n        }}\n      >\n        {selectedChat ? (\n          <SingleChat></SingleChat>\n        ) : (\n          <Empty\n            image={noContact}\n            message=\"Select a user to start chatting\"\n            width={290}\n            height={290}\n          />\n        )}\n      </div>\n    );\n  }\n}\nexport default PageList;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Empty.jsx",["249"],"function Empty({ image, message, width, height }) {\n  return (\n    <div\n      style={{\n        textAlign: 'center',\n        fontFamily: 'Montserrat',\n        fontSize: 27,\n        marginTop: 45,\n      }}\n    >\n      <img src={image} width={width} height={height} />\n      <p style={{ color: '#98cfff', marginTop: 10 }}>{message}</p>\n    </div>\n  );\n}\nexport default Empty;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\forgotPassword.jsx",["250","251","252","253"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useMutation } from 'react-query';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ForgotPassword({ handleClickOpen, handleClose }) {\n  const [email, setEmail] = useState('');\n  const [securityAnswer, setSecurityAnswer] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n\n  const Notify = (message) => {\n    toast.success(message);\n  };\n\n  const answerQst = async () => {\n    try {\n      const resp = await axios.post(\n        'https://talkmail-server.onrender.com/api/user/forgot',\n        {\n          email: email,\n          securityAnswer: securityAnswer,\n        },\n        {\n          headers: {\n            'Content-type': 'application/json',\n          },\n        },\n      );\n\n      // If security answer is correct, proceed with password reset\n      const resetResp = await axios.post(\n        'https://talkmail-server.onrender.com/api/user/reset',\n        {\n          email: email,\n          newPassword: newPassword,\n        },\n        {\n          headers: {\n            'Content-type': 'application/json',\n          },\n        },\n      );\n      // return resp.data;\n\n      return resetResp.data;\n    } catch (error) {\n      console.error('Error from server:', error);\n      throw error; // Rethrow the error for the onError callback\n    }\n  };\n\n  const { mutate } = useMutation(answerQst, {\n    onSuccess: (response) => {\n      Notify('Mot de passe réinitialisé avec succes !');\n\n      if (response && response.message) {\n        console.log('Message from server:', response.message);\n      } else {\n        console.log('Unexpected response structure:', response);\n      }\n    },\n    onError: (error) => {\n      console.error('Error from server:', error);\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <Dialog\n        onClose={handleClose}\n        PaperProps={{\n          component: 'form',\n          onSubmit: async (event) => {\n            event.preventDefault();\n            try {\n              const response = await mutate();\n            } catch (error) {\n              console.error('Error during mutation:', error);\n            }\n            handleClose();\n          },\n        }}\n      >\n        <DialogTitle>Reinitialisation de mot de passe :</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Pour confirmer votre identité, veuillez introduire votre Email et\n            répondre à cette question de sécurité, puis saisir un nouveau mot de\n            passe\n          </DialogContentText>\n          <TextField\n            autoFocus\n            required\n            margin=\"dense\"\n            id=\"name\"\n            name=\"email\"\n            label=\"Adresse mail\"\n            type=\"email\"\n            fullWidth\n            variant=\"standard\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <br></br>\n          <br></br>\n          <DialogContentText>\n            Choisissez la question de sécurité choisie lors de votre insciption\n            :\n          </DialogContentText>\n          <br></br>\n          <br></br>\n          <FormControl fullWidth>\n            <InputLabel id=\"demo-simple-select-label\">\n              Questions de sécurité\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              label=\"Age\"\n            >\n              <MenuItem>\n                Quel est le nom de votre premier animal de compagnie ?\n              </MenuItem>\n              <MenuItem>Quel est le nom de votre enseignant préféré ?</MenuItem>\n              <MenuItem>\n                Quel est l'adresse de votre maison d'enfance ?\n              </MenuItem>\n            </Select>\n          </FormControl>\n          <TextField\n            autoFocus\n            required\n            margin=\"dense\"\n            id=\"name\"\n            name=\"securityAnswer\"\n            label=\"Votre réponse\"\n            type=\"text\"\n            fullWidth\n            variant=\"standard\"\n            value={securityAnswer}\n            onChange={(e) => setSecurityAnswer(e.target.value)}\n          />\n          <TextField\n            required\n            margin=\"dense\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            label=\"Nouveau mot de passe\"\n            type=\"password\"\n            fullWidth\n            variant=\"standard\"\n            value={newPassword}\n            onChange={(e) => setNewPassword(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Annuler</Button>\n          <Button type=\"submit\">Reset</Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default ForgotPassword;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EventContent.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EventForm.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\FormOTP.jsx",["254","255","256","257","258","259","260","261","262"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useMutation } from 'react-query';\nimport { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport { useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction FormOTP({ handleCloseOtp, currentOtp, handleLogin, Notify }) {\n  const [otp, setOtp] = useState('');\n  const navigate = useNavigate();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (currentOtp == otp) {\n      Notify('Connexion réussie !', () => {\n        handleLogin();\n        navigate('/mails/inbox');\n      });\n    }\n  };\n\n  return (\n    <Dialog onClose={handleCloseOtp}>\n      <DialogTitle>Two Factors Authentication</DialogTitle>\n\n      <DialogContentText>\n        Veuillez saisir le code OTP envoyé vers votre e-mail de sécurité\n      </DialogContentText>\n      <TextField\n        autoFocus\n        required\n        margin=\"dense\"\n        id=\"name\"\n        name=\"OTP\"\n        label=\"Votre code OTP\"\n        type=\"text\"\n        fullWidth\n        variant=\"standard\"\n        value={otp}\n        onChange={(e) => setOtp(e.target.value)}\n      />\n\n      <Button onClick={handleCloseOtp}>Annuler</Button>\n      <Button onClick={(e) => handleSubmit(e)}>Valider</Button>\n    </Dialog>\n  );\n}\n\nexport default FormOTP;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EventItem.jsx",["263"],"import { useMutation } from 'react-query';\nimport axios from 'axios';\nimport trash from '../assets/delete.png';\nimport pencil from '../assets/pencil.png';\nimport '../styles/EventItem.css';\n\nfunction EventItem({\n  id,\n  title,\n  date,\n  object,\n  setSelectedEvent,\n  setEventToUpdate,\n  evenements,\n  setEvenements,\n}) {\n  const user = JSON.parse(sessionStorage.getItem('user'));\n\n  const deleteEvent = async (id) => {\n    const response = axios.delete(\n      `https://talkmail-server.onrender.com/api/agenda/events/${id}`,\n      {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n  };\n  const { mutate } = useMutation(deleteEvent, {\n    onSuccess: (res) => {\n      const filterEvents = evenements.filter((ev) => ev._id !== id);\n      setEvenements(filterEvents);\n    },\n    onError: (error) => {\n      console.log(error);\n    },\n  });\n\n  const handleUpdateEvent = (event) => {\n    event.stopPropagation();\n    setSelectedEvent(null);\n    setEventToUpdate(object);\n  };\n\n  return (\n    <div className=\"event-item\" onClick={() => setSelectedEvent(object)}>\n      <h4 className=\"event-title\">{object.title}</h4>\n      <span className=\"event-date\">{object.startDate}</span>\n      <div className=\"options\">\n        <img\n          src={trash}\n          alt=\"delete-event\"\n          width={15}\n          height={15}\n          style={{ paddingRight: '.8rem' }}\n          onClick={() => mutate(id)}\n        />\n        <img\n          src={pencil}\n          alt=\"update-event\"\n          width={15}\n          height={15}\n          style={{ paddingRight: '.8rem' }}\n          onClick={(e) => handleUpdateEvent(e)}\n        />\n      </div>\n    </div>\n  );\n}\nexport default EventItem;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\AccountSettingsForm.jsx",["264","265","266","267"],"import React, { useState, useEffect } from 'react';\nimport '../styles/AccountSettingsForm.css';\nimport { Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\n\nfunction AccountSettingsForm({ email, handleLogout }) {\n  const user = JSON.parse(sessionStorage.getItem('user'));\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\n  const [profilePic, setProfilePic] = useState(user.pic);\n  const [loading, setLoading] = useState(false);\n  const profilePicture = localStorage.getItem('profilePicture');\n  const [tfa, setTfa] = useState(user.twoFA);\n\n  const navigate = useNavigate();\n\n  const handleLogoutClick = () => {\n    const confirmLogout = window.confirm(\n      'Voulez vous vraimant vous déconnecter ?',\n    );\n    if (confirmLogout) {\n      handleLogout();\n      navigate('/index.html');\n    }\n  };\n\n  // const handleProfilePicChange = (e) => {\n  //   postDetails(e.target.files[0]);\n  // };\n\n  // const postDetails = async (pics) => {\n  //   setLoading(true);\n\n  //   if (pics === undefined) {\n  //     setLoading(false);\n  //     console.log('No picture selected');\n  //     return;\n  //   }\n\n  //   if (pics.type === 'image/jpeg' || pics.type === 'image/png') {\n  //     const data = new FormData();\n  //     data.append('file', pics);\n  //     data.append('upload_preset', 'TalkMail');\n  //     data.append('cloud_name', 'dwgulyxkt');\n\n  //     try {\n  //       const response = await fetch(\n  //         'https://api.cloudinary.com/v1_1/dwgulyxkt/image/upload',\n  //         {\n  //           method: 'post',\n  //           body: data,\n  //         },\n  //       );\n\n  //       if (!response.ok) {\n  //         throw new Error('Error uploading image to Cloudinary');\n  //       }\n\n  //       const imageData = await response.json();\n\n  //       console.log('Image uploaded to Cloudinary:', imageData);\n\n  //       // Logg l url\n  //       console.log('Profile picture URL:', imageData.url);\n\n  //       setProfilePic(imageData.url.toString());\n  //       setLoading(false);\n  //     } catch (err) {\n  //       console.error('Error uploading image to Cloudinary:', err);\n  //       setLoading(false);\n  //     }\n  //   } else {\n  //     setLoading(false);\n  //     console.log('Invalid file type. Please upload a JPEG or PNG image.');\n  //     return;\n  //   }\n  // };\n\n  // const handleConfirmProfilePicChange = () => {\n  //   const confirmation = window.confirm(\n  //     'Do you want to update your profile picture?',\n  //   );\n  //   if (confirmation) {\n  //     updateProfilePicture(profilePic);\n  //   } else {\n  //     console.log('Profile picture update cancelled by the user');\n  //   }\n  // };\n\n  // const updateProfilePicture = async (newProfilePicUrl) => {\n  //   console.log('Sending profile picture update with URL:', newProfilePicUrl);\n  //   try {\n  //     const response = await axios.put(\n  //       'http://localhost:4001/api/user/changepic',\n  //       { newPic: newProfilePicUrl },\n  //       {\n  //         headers: {\n  //           Authorization: `Bearer ${user.token}`,\n  //           'Content-Type': 'application/json',\n  //         },\n  //       },\n  //     );\n  //     return response.data;\n\n  //     console.log('Profile picture updated in the backend:', response.data);\n  //   } catch (error) {\n  //     console.error('Error updating profile picture in the backend:', error);\n  //   }\n  // };\n\n  const handleSubmit = async () => {\n    if (newPassword !== confirmNewPassword) {\n      alert('Les mots de passe ne correspondent pas.');\n      return;\n    }\n    try {\n      const response = await changePassword();\n    } catch (error) {\n      console.error('Password change failed:', error);\n    }\n  };\n\n  const handleDelete = async () => {\n    const confirmDelete = window.confirm(\n      'Voulez-vous vraiment supprimer votre compte ? Cette action est irréversible.',\n    );\n\n    if (confirmDelete) {\n      try {\n        const response = await deleteUser();\n\n        handleLogout();\n        navigate('/index.html');\n      } catch (error) {\n        console.error('Deleting user failed', error);\n      }\n    }\n  };\n\n  const changePassword = async () => {\n    try {\n      const response = await axios.put(\n        'https://talkmail-server.onrender.com/api/user/changepassword',\n        {\n          currentPassword: oldPassword,\n          newPassword: newPassword,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n            'Content-type': 'application/json',\n          },\n        },\n      );\n      setOldPassword('');\n      setNewPassword('');\n      setConfirmNewPassword('');\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 400) {\n        alert('Ancien mot de passe incorrect. Veuillez réessayer.');\n      } else {\n        alert(\n          \"Une erreur s'est produite lors de la modification du mot de passe.\",\n        );\n      }\n    }\n  };\n\n  const deleteUser = async () => {\n    try {\n      const response = await axios.delete(\n        `https://talkmail-server.onrender.com/api/user/delete/${user._id}`,\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n      return response.data;\n    } catch (error) {\n      console.error('error deleting user', error);\n\n      throw error;\n    }\n  };\n\n  const handleProfilePicChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setProfilePic(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleConfirmChange = () => {\n    localStorage.setItem('profilePicture', profilePic);\n    toast.success('Photo changée avec succès');\n  };\n\n  const twoFactors = async () => {\n    try {\n      const response = await axios.put(\n        'https://talkmail-server.onrender.com/api/user/2FA',\n        {\n          twoFA: tfa,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n\n      setTfa(response.data.twoFA);\n      return response.data;\n    } catch (error) {\n      console.error('Error from server:', error);\n      throw error;\n    }\n  };\n\n  useEffect(() => {\n    setOldPassword('');\n    setNewPassword('');\n    setConfirmNewPassword('');\n  }, []);\n\n  return (\n    <div className=\"account-settings-form\">\n      <div className=\"setting-box\">\n        <div className=\"btn-pic-change\"></div>\n        <label className=\"option\">Changer la photo de profil</label>\n        <img\n          src={\n            profilePic ||\n            profilePicture ||\n            'https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg'\n          }\n          alt=\"Profile Pic\"\n          className=\"profile-pic\"\n        />\n        <input\n          className=\"file-input-style-file\"\n          placeholder=\"Charger votre photo de profil\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleProfilePicChange}\n        />\n        <button className=\"btn-pic-annuler\" onClick={() => setProfilePic('')}>\n          Annuler\n        </button>\n        <button\n          className=\"btn-pic-confirmer\"\n          disabled={!profilePic}\n          onClick={handleConfirmChange}\n        >\n          Confirmer le changement\n        </button>\n      </div>\n\n      <div className=\"setting-box\">\n        <label className=\"option\">Modifier le mot de passe</label>\n        <input\n          type=\"password\"\n          placeholder=\"Ancien mot de passe\"\n          value={oldPassword}\n          onChange={(e) => setOldPassword(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Nouveau mot de passe\"\n          value={newPassword}\n          onChange={(e) => setNewPassword(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Confirmer le nouveau mot de passe\"\n          value={confirmNewPassword}\n          onChange={(e) => setConfirmNewPassword(e.target.value)}\n        />\n        <div className=\"button-container\">\n          <button onClick={handleSubmit}>\n            Enregistrer le nouveau mot de passe\n          </button>\n          <button className=\"delete-account-button\" onClick={handleDelete}>\n            Supprimer le compte\n          </button>\n          <Link to=\"/index.html\" onClick={handleLogoutClick}>\n            <button className=\"logout-button\">Logout</button>\n          </Link>\n        </div>\n        <label>\n          Activer l'authentification à deux facteurs\n          <input type=\"checkbox\" checked={tfa} onChange={() => twoFactors()} />\n        </label>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default AccountSettingsForm;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\MailList.jsx",["268","269","270","271","272"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport '../styles/mailist.css';\nimport empStar from '../assets/empStar.png';\nimport star from '../assets/star.png';\nimport trash from '../assets/delete.png';\nimport imp from '../assets/important.png';\nimport { useQuery } from 'react-query';\n\nfunction MailList({\n  currentMailBox,\n  openEmailModal,\n  setStar,\n  setBin,\n  emailInfo,\n  setImp,\n}) {\n  const mailboxFetch = currentMailBox || 'inbox';\n  const [selectedEmail, setSelectedEmail] = useState(null);\n  // console.log('render');\n  const {\n    data: mails,\n    isLoading,\n    isError,\n  } = useQuery(['mails', mailboxFetch], fetchMails);\n\n  const mailId = emailInfo ? emailInfo._id : null;\n\n  async function fetchMails() {\n    try {\n      const user = JSON.parse(sessionStorage.getItem('user'));\n      const response = await axios.get(\n        `https://talkmail-server.onrender.com/api/retrieve/retrievemails/${user._id}`,\n        {\n          params: {\n            mailbox: mailboxFetch,\n          },\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n\n      return Array.isArray(response.data[mailboxFetch])\n        ? response.data[mailboxFetch]\n        : [];\n    } catch (error) {\n      console.error('Error fetching mails:', error);\n      throw error;\n    }\n  }\n\n  const handleRowClick = (email) => {\n    // console.log('avant de cliquer sur un email');\n    openEmailModal(email);\n    // console.log('apres avoir cliquer sur un email');\n  };\n\n  const handleToggleStar = async () => {\n    try {\n      const user = JSON.parse(sessionStorage.getItem('user'));\n\n      const response = await axios.put(\n        `https://talkmail-server.onrender.com/api/mail/togglestar`,\n        { mailId },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n      await fetchMails();\n    } catch (error) {\n      console.error('Error toggling star:', error);\n    }\n  };\n\n  const handleBin = async () => {\n    try {\n      const user = JSON.parse(sessionStorage.getItem('user'));\n\n      const response = await axios.put(\n        `https://talkmail-server.onrender.com/api/mail/movetobin`,\n        { mailId },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n\n      await fetchMails();\n    } catch (error) {\n      console.error('Error moving to bin:', error);\n    }\n  };\n\n  const handleImp = async () => {\n    try {\n      const user = JSON.parse(sessionStorage.getItem('user'));\n\n      const response = await axios.put(\n        `https://talkmail-server.onrender.com/api/mail/important`,\n        { mailId },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n\n      await fetchMails();\n    } catch (error) {\n      console.error('Error moving to imp:', error);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Chargement en cours...</div>;\n  }\n\n  if (isError) {\n    return <div>Erreur lors du chargement des mails</div>;\n  }\n\n  return (\n    <div className=\"mail-item\">\n      <p className=\"mail-send\">\n        {currentMailBox === 'outbox'\n          ? 'Mails envoyés:'\n          : currentMailBox === 'inbox'\n            ? 'Mails reçus:'\n            : currentMailBox === 'starred'\n              ? 'Favoris:'\n              : currentMailBox === 'bin'\n                ? 'Supprimés:'\n                : currentMailBox === 'important'\n                  ? 'Mails importants:'\n                  : ''}\n      </p>\n      <TableContainer className=\"mailist-container\" component={Paper}>\n        <Table size=\"small\" aria-label=\"a dense table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                {currentMailBox === 'outbox' ? 'Vers' : 'De'}\n              </TableCell>\n              <TableCell align=\"right\">Email</TableCell>\n              <TableCell align=\"right\">Objet</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {mails?.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={4} align=\"center\">\n                  Aucun mail disponible\n                </TableCell>\n              </TableRow>\n            ) : (\n              mails.map((mail) => (\n                <TableRow key={mail._id} onClick={() => handleRowClick(mail)}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {currentMailBox === 'outbox' &&\n                    mail.to[0] &&\n                    mail.to[0].firstname\n                      ? `${mail.to[0].firstname || 'N/A'} ${\n                          mail.to[0].lastname || ''\n                        }`\n                      : currentMailBox === 'inbox' && mail.from\n                        ? `${mail.from.firstname || 'N/A'} ${\n                            mail.from.lastname || ''\n                          }`\n                        : currentMailBox === 'starred' && mail.from\n                          ? `${mail.from.firstname || 'N/A'} ${\n                              mail.from.lastname || ''\n                            }`\n                          : currentMailBox === 'bin' && mail.from\n                            ? `${mail.from.firstname || 'N/A'} ${\n                                mail.from.lastname || ''\n                              }`\n                            : currentMailBox === 'important' && mail.from\n                              ? `${mail.from.firstname || 'N/A'} ${\n                                  mail.from.lastname || ''\n                                }`\n                              : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {currentMailBox === 'outbox' && mail.to[0]\n                      ? mail.to[0].email || 'N/A'\n                      : currentMailBox === 'inbox' && mail.from\n                        ? mail.from.email || 'N/A'\n                        : currentMailBox === 'starred' && mail.from\n                          ? mail.from.email || 'N/A'\n                          : currentMailBox === 'bin' && mail.from\n                            ? mail.from.email || 'N/A'\n                            : currentMailBox === 'important' && mail.from\n                              ? mail.from.email || 'N/A'\n                              : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"right\">{mail.subject || 'N/A'}</TableCell>\n                  <TableCell align=\"right\">\n                    <div>\n                      <img\n                        src={trash}\n                        alt=\"delete-mail\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: '.5rem' }}\n                        // onClick={setBin(true)}\n                        onClick={handleBin}\n                      />\n                      <img\n                        src={mail.starred ? star : empStar}\n                        alt=\"favori-mail\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: '.5rem' }}\n                        // onClick={setStar(true)}\n                        onClick={handleToggleStar}\n                      />\n                      <img\n                        src={imp}\n                        alt=\"important-mail\"\n                        width={15}\n                        height={15}\n                        style={{ marginRight: '.5rem' }}\n                        // onClick={setBin(true)}\n                        onClick={handleImp}\n                      />\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nexport default MailList;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\context\\ChatLogics.js",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\Newmessage.jsx",["273"],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SideBarButton.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SearchChat.jsx",["274","275","276"],"import { useState } from 'react';\nimport search from '../assets/search.png';\nimport '../styles/SearchChat.css';\nimport axios from 'axios';\n\nfunction SearchChat({ users, setSearchedUser }) {\n  \n  function searchUser(sear) {\n    const filtredUsers = users.filter((user) => {\n      return (\n        user.lastname.includes(sear) ||\n        user.email.includes(sear) ||\n        user.firstname.includes(sear) \n      );\n    });\n    return filtredUsers;\n  }\n\n  return (\n    <input\n      className=\"search-cht\"\n      type=\"text\"\n      placeholder=\"Search\"\n      name=\"search-chat\"\n      onChange={(e) => { setSearchedUser(searchUser(e.target.value)) }}\n    />\n  );\n}\nexport default SearchChat;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ProfileModal.jsx",["277"],"import { Image } from '@mui/icons-material';\nimport { Avatar, Typography } from '@mui/material';\nimport React from 'react';\n\nfunction ProfileModal ({user}) {\n  return (\n    <div style={{display:'flex', justifyContent:'space-around', alignItems:'space-evently', flexDirection:'column'}}>\n      <Avatar\n        mr={5}\n        size=\"md\"\n        cursor=\"pointer\"\n        name={user.firstname}\n        src={user.pic}\n        style={{ width: '8rem', height: '8rem', margin: '0 0 2rem 0' }}\n      />\n      <h1 style={{ color: '#374957', margin: '2rem 0', fontFamily: 'system-ui' }}>\n        {user.firstname} {user.lastname}\n      </h1>\n      <Typography\n        \n        fontFamily=\"Work sans\"\n      >\n        Email : {user.email}\n      </Typography>\n    </div>\n  );\n};\n\nexport default ProfileModal;","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\UpdateGroupChatModal.jsx",["278"],"import { Box, Button, TextField, Typography } from '@mui/material';\nimport CloseIcon from '@material-ui/icons/Close'\nimport React, { useContext, useState } from 'react';\nimport { ChatState } from '../context/ChatContext';\nimport UserBadgeItem from './UserBadgeItem';\nimport axios from 'axios';\nimport UserListItem from './UserListItem';\n\nfunction UpdateGroupChatModal({ fetchAgain, setFetchAgain, fetchMessages }) {\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState('');\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n\n  const { selectedChat, setSelectedChat, user } = useContext(ChatState);\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      console.log('Only admins can remove someone!');\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.put(\n        `https://talkmail-server.onrender.com/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config,\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n\n    setGroupChatName('');\n  };\n\n  const handleRename = async() => {\n    if (!groupChatName) {\n      return;\n    };\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.put(\n        'https://talkmail-server.onrender.com/api/chat/rename',\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config,\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      console.log(error);\n      setRenameLoading(false);\n    }\n    setGroupChatName('');\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    };\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`https://talkmail-server.onrender.com/api/user/search?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  const handleAddUser = async(user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      console.log('Only admins can add someone');\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.put(\n        `https://talkmail-server.onrender.com/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n    setGroupChatName('');\n  }\n  return (\n    <div>\n      <Typography\n        fontSize=\"35px\"\n        fontFamily=\"system-ui\"\n        display=\"flex\"\n        color=\"#374957\"\n        justifyContent=\"center\"\n      >\n        {selectedChat.chatName}\n      </Typography>\n      <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n        {selectedChat.users.map((u) => (\n          <Box cursor=\"pointer\" px={3} py={2} borderRadius=\"lg\">\n            <div>\n              <UserBadgeItem\n                key={u._id}\n                user={u}\n                admin={selectedChat.groupAdmin}\n                handleFunction={() => handleRemove(u)}\n              />\n              {/* <ul style={{ overflowY: scroll }}>\n            <li style={{\n              listStyle: 'none',\n              padding: '.2rem',\n            }}>{`${u.firstname } ${u.lastname}`} </li>\n          </ul> */}\n            </div>\n          </Box>\n        ))}\n      </Box>\n      <Box\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <TextField\n          placeholder=\"Chat Name\"\n          mb={3}\n          fullWidth\n          variant=\"outlined\"\n          value={groupChatName}\n          onChange={(e) => setGroupChatName(e.target.value)}\n        />\n        <Button isLoading={renameloading} onClick={handleRename}>\n          Update\n        </Button>\n      </Box>\n      <TextField\n        placeholder=\"Add Users to the group..\"\n        mb={3}\n        fullWidth\n        variant=\"outlined\"\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        searchResult\n          ?.slice(0, 4)\n          .map((userr) => (\n            <UserListItem\n              key={userr._id}\n              user={userr}\n              handleFunction={() => handleAddUser(userr)}\n            />\n          ))\n      )}\n      <Button\n        onClick={() => handleRemove(user)}\n        style={{\n          color: 'black',\n          margin: '1.5rem 0 0 6rem',\n          backgroundColor: '#557cc8',\n        }}\n      >\n        Leave Group\n      </Button>\n    </div>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\EmailDetailsModal.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ContactInv.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\SingleChat.jsx",["279","280","281","282","283","284","285","286"],"import { Box, Button, FormControl, IconButton, Input, Paper, TextField, Typography } from '@mui/material';\nimport React, { useContext, useEffect, useState } from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Picker from \"emoji-picker-react\"\nimport { ChatState } from '../context/ChatContext';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\nimport ScrollableChat from './ScrollableChat';\nimport '../styles/mailist.css';\nimport { getSender } from '../context/ChatLogics';\nimport '../styles/EmojiInput.css'\nimport Newmessage from './Newmessage';\n\nconst ENDPOINT = 'https://talkmail-server.onrender.com';\nvar socket, selectedChatCompare;\n\n\nconst EmojiIcon = () => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width='28'\n      height='28'\n      viewBox='0 0 24 24'>\n      <path\n        fill='none'\n        d='M0 0h24v24H0V0z'\n      />\n      <circle\n        cx='15.5'\n        cy='9.5'\n        r='1.5'\n      />\n      <circle\n        cx='8.5'\n        cy='9.5'\n        r='1.5'\n      />\n      <path d='M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm-5-6c.78 2.34 2.72 4 5 4s4.22-1.66 5-4H7z' />\n    </svg>\n  )\n}\n\nfunction SingleChat({ fetchAgain, setFetchAgain }) {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const [showPicker, setShowPicker] = useState(false)\n\n  const onEmojiClick = (event) => {\n    setNewMessage((prevInput) => prevInput + event.emoji)\n    setShowPicker(false)\n  }\n\n  const { user, selectedChat, setSelectedChat } = useContext(ChatState);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) {\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(`https://talkmail-server.onrender.com/api/message/${selectedChat._id}`, config);\n\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit('join chat', selectedChat._id)\n    } catch (error) {\n       console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit('setup', user);\n    socket.on('connected', () => setSocketConnected(true));\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n  });\n\n  const sendMessage = async (event) => {\n    // if (event.key === 'Enter' && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        const { data } = await axios.post('https://talkmail-server.onrender.com/api/message', {\n          content: newMessage,\n          chatId: selectedChat._id,\n        } , config);\n\n        socket.emit('new message', data)\n        setNewMessage('');\n        setMessages([...messages, data])\n\n      } catch (error) {\n        console.log(error);\n      }\n  // }\n}\n  const sendByKeyBoard = (e) => {\n    if (e.key === 'Enter' && newMessage) {\n      sendMessage()\n    }\n  }\n\n  const typingHandler = (e) => {\n    // setNewMessage(e.target.value);\n\n    if (!socketConnected) {\n      return\n    }\n\n    if (!typing) {\n      setTyping(true)\n      socket.emit('typing', selectedChat._id)\n    }\n\n    let lastTypingTime = new Date().getTime()\n    var timerLength = 3000\n    setTimeout(() => {\n      var timeNow = new Date().getTime()\n      var timeDiff = timeNow - lastTypingTime\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on('message recieved', (newMessageRecieved) => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        // notiff\n      } else {\n        setMessages([...messages, newMessageRecieved])\n      }\n    });\n  });\n\n  return (\n    <div\n      className=\"convItem\"\n      style={{\n        marginBottom: '3rem',\n        width: '45vw',\n        height: '75vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'space-around',\n      }}\n    >\n      <Typography\n        fontSize={{ base: '28px', md: '30px' }}\n        pb={3}\n        px={2}\n        style={{\n          backgroundColor: '#557bc8',\n          padding: '1rem',\n          borderRadius: '1rem 1rem 0 0 ',\n        }}\n        w=\"100%\"\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <h5 style={{ float: 'left', fontFamily: 'system-ui' }}>\n          {!selectedChat.isGroupChat\n            ? getSender(user, selectedChat.users)\n            : selectedChat.chatName.toUpperCase()}\n        </h5>\n        <Button\n          display={{ base: 'flex', md: 'none' }}\n          onClick={() => setSelectedChat('')}\n        >\n          <CloseIcon cursor=\"pointer\" style={{ float: 'right' }}></CloseIcon>\n        </Button>\n      </Typography>\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        justifyContent=\"flex-end\"\n        p={3}\n        bg=\"#E8E8E8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        style={{ flex: 1, backgroundColor: 'rgba(0,0,0,0.1)' }}\n      >\n        <div style={{ flex: 1 }}>\n          {loading ? (\n            <div>loading</div>\n          ) : (\n            <div display=\"flex\" style={{ height: '50vh' }}>\n              <ScrollableChat messages={messages} />\n            </div>\n          )}\n        </div>\n      </Box>\n      <FormControl\n        onKeyDown={sendByKeyBoard}\n        style={{ width: '94.5%', height: '50px', alignSelf: 'center', padding: '.8rem 1rem', backgroundColor: '#557bc8', borderRadius: '0 0 1rem 1rem' }}\n      >\n        {/* <TextField\n          style={{ width: '100%', marginTop: '.3rem' }}\n          fullWidth\n          size=\"md\"\n          variant=\"outlined\"\n          background=\"#FFF\"\n          placeholder=\"Enter a message... \"\n          onChange={typingHandler}\n          value={newMessage}\n        /> */}\n      <div className='input-container'>\n      <div className='input-emoji-wrapper'>\n        <input\n          className='input-field'\n          type='Text'\n          placeholder='Text'\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n        />\n        <button\n          className='emoji-icon'\n          onClick={() => setShowPicker((val) => !val)}>\n          <EmojiIcon />\n        </button>\n      </div>\n\n      <button\n        className='send-button'\n        onClick={sendMessage}\n      >\n        send\n      </button>\n      {showPicker && (\n        <div className='picker-container'>\n          <Picker onEmojiClick={onEmojiClick} />\n        </div>\n      )}\n    </div>\n      </FormControl>\n    </div>\n    \n  )\n}\nexport default SingleChat;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ContactLink.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ChatBox.jsx",["287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"import React, { useContext, useEffect, useState } from 'react';\nimport { ChatState } from '../context/ChatContext';\nimport axios from 'axios';\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContentText,\n  Input,\n  Modal,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport {\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormLabel,\n  ModalClose,\n  ModalDialog,\n  Stack,\n} from '@mui/joy';\nimport { Add } from '@mui/icons-material';\nimport UserListItem from './UserListItem';\nimport GroupChatModal from './GroupChatModal';\nimport '../styles/ChatBox.css';\nimport '../styles/SearchChat.css';\nimport { getSender } from '../context/ChatLogics';\n\nfunction ChatBox({ fetchAgain }) {\n  const [loggedUser, setLoggedUser] = useState();\n  const [search, setSearch] = useState('');\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [loadingChat, setLoadingChat] = useState();\n  const { user, setSelectedChat, chats, setChats, selectedChat } =\n    useContext(ChatState);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const fetchChats = async () => {\n    const userToken = JSON.parse(sessionStorage.getItem('user')).token;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userToken}`,\n        },\n      };\n      const { data } = await axios.get(\n        'https://talkmail-server.onrender.com/api/chat',\n        config,\n      );\n      setChats(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `https://talkmail-server.onrender.com/api/user/search?search=${search}`,\n        config,\n      );\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          'Content-type': 'application/json',\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.post(\n        'https://talkmail-server.onrender.com/api/chat',\n        { userId },\n        config,\n      );\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem('userInfo')));\n    fetchChats();\n  }, [fetchAgain]);\n  return (\n    <div className=\"contact-nav\">\n      <Input\n        placeholder=\"Search\"\n        className=\"search-cht\"\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      <div className=\"contact-list\" style={{ color: 'white' }}>\n        {loading ? (\n          <div>loadin</div>\n        ) : (\n          searchResult?.slice(0, 4).map((userr) => (\n            <UserListItem\n              key={userr._id}\n              user={userr}\n              handleFunction={() => accessChat(userr)}\n              color=\"white\"\n            >\n              {userr.lastname}\n            </UserListItem>\n          ))\n        )}\n        {chats.map((chat) => (\n          <Box\n            onClick={() => setSelectedChat(chat)}\n            cursor=\"pointer\"\n            backgroundColor={selectedChat === chat ? '#374957' : '#1a2e62'}\n            color={selectedChat === chat ? 'white' : 'white'}\n            style={{}}\n            px={3}\n            py={2}\n            borderRadius=\"lg\"\n            key={chat._id}\n          >\n            <Typography>\n              {!chat.isGroupChat\n                ? chat.users && chat.users.length > 0\n                  ? getSender(user, chat.users)\n                  : 'unknown sender'\n                : chat.chatName}\n            </Typography>\n            {chat.latestMessage && (\n              <p fontSize=\"xs\">\n                <b>{chat.latestMessage?.sender?.firstname} : </b>\n\n                {chat.latestMessage.content.length > 50\n                  ? chat.latestMessage.content.substring(0, 51) + '...'\n                  : chat.latestMessage.content}\n              </p>\n            )}\n          </Box>\n        ))}\n      </div>\n      <GroupChatModal>\n        <Button\n          style={{ margin: '1.5rem', backgroundColor: '#557cc8' }}\n          variant=\"filled\"\n          onClick={handleClickOpen}\n        >\n          New Group Chat\n        </Button>\n      </GroupChatModal>\n    </div>\n  );\n}\n\nexport default ChatBox;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\UserBadgeItem.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\UserListItem.jsx",[],"C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\GroupChatModal.jsx",["305","306"],"import React, { useContext, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport axios from 'axios';\nimport { ChatState } from '../context/ChatContext';\n\nimport UserListItem from './UserListItem';\nimport UserBadgeItem from './UserBadgeItem';\n\nfunction GroupChatModal({ children }) {\n  const [open, setOpen] = useState(false);\n  const [search, setSearch] = useState('');\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { user, setSelectedChat, chats, setChats, selectedChat } =\n    useContext(ChatState);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `https://talkmail-server.onrender.com/api/user/search?search=${search}`,\n        config,\n      );\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.post(\n        'https://talkmail-server.onrender.com/api/chat/group',\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config,\n      );\n\n      setChats([data, ...chats]);\n      setOpen(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      console.log('user already added');\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  return (\n    <div>\n      <Button variant=\"filled\" onClick={handleClickOpen}>\n        {children}\n      </Button>\n      <Dialog\n        fullWidth\n        style={{ padding: '40px' }}\n        open={open}\n        onClose={handleClose}\n      >\n        <DialogTitle\n          id=\"alert-dialog-title\"\n          fontSize=\"25px\"\n          fontFamily=\"Work sans\"\n          display=\"flex\"\n          justifyContent=\"center\"\n        >\n          <Typography>\n            {groupChatName !== '' ? groupChatName : 'Create Group Chat'}\n          </Typography>\n        </DialogTitle>\n        <DialogContent display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n          <TextField\n            placeholder=\"Chat Name\"\n            mb={3}\n            fullWidth\n            variant=\"outlined\"\n            onChange={(e) => setGroupChatName(e.target.value)}\n            style={{ marginBottom: '1rem' }}\n          />\n          <TextField\n            placeholder=\"Add Users to the group..\"\n            mb={3}\n            fullWidth\n            variant=\"outlined\"\n            onChange={(ee) => handleSearch(ee.target.value)}\n          />\n          <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n            {selectedUsers.map((u) => (\n              <UserBadgeItem\n                key={u._id}\n                user={u}\n                handleFunction={() => handleDelete(u)}\n              ></UserBadgeItem>\n            ))}\n          </Box>\n          {loading ? (\n            <div>loading</div>\n          ) : (\n            searchResult\n              ?.slice(0, 4)\n              .map((userr) => (\n                <UserListItem\n                  key={userr._id}\n                  user={userr}\n                  handleFunction={() => handleGroup(userr)}\n                ></UserListItem>\n              ))\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleSubmit}>\n            Create\n          </Button>\n          <Button onClick={handleClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default GroupChatModal;\n","C:\\Users\\hp\\Desktop\\Talkmail-web\\front-end\\src\\components\\ScrollableChat.jsx",[],{"ruleId":"307","replacedBy":"308"},{"ruleId":"309","replacedBy":"310"},{"ruleId":"311","severity":1,"message":"312","line":17,"column":10,"nodeType":"313","messageId":"314","endLine":17,"endColumn":15},{"ruleId":"311","severity":1,"message":"315","line":130,"column":15,"nodeType":"313","messageId":"314","endLine":130,"endColumn":23},{"ruleId":"311","severity":1,"message":"316","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":20,"column":10,"nodeType":"313","messageId":"314","endLine":20,"endColumn":15},{"ruleId":"311","severity":1,"message":"317","line":26,"column":10,"nodeType":"313","messageId":"314","endLine":26,"endColumn":19},{"ruleId":"311","severity":1,"message":"318","line":32,"column":9,"nodeType":"313","messageId":"314","endLine":32,"endColumn":25},{"ruleId":"311","severity":1,"message":"319","line":52,"column":9,"nodeType":"313","messageId":"314","endLine":52,"endColumn":26},{"ruleId":"311","severity":1,"message":"320","line":8,"column":8,"nodeType":"313","messageId":"314","endLine":8,"endColumn":14},{"ruleId":"311","severity":1,"message":"321","line":22,"column":9,"nodeType":"313","messageId":"314","endLine":22,"endColumn":20},{"ruleId":"322","severity":1,"message":"323","line":44,"column":9,"nodeType":"324","endLine":44,"endColumn":34},{"ruleId":"311","severity":1,"message":"316","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":19},{"ruleId":"311","severity":1,"message":"325","line":4,"column":8,"nodeType":"313","messageId":"314","endLine":4,"endColumn":16},{"ruleId":"311","severity":1,"message":"326","line":7,"column":27,"nodeType":"313","messageId":"314","endLine":7,"endColumn":45},{"ruleId":"311","severity":1,"message":"327","line":9,"column":9,"nodeType":"313","messageId":"314","endLine":9,"endColumn":13},{"ruleId":"311","severity":1,"message":"328","line":2,"column":10,"nodeType":"313","messageId":"314","endLine":2,"endColumn":14},{"ruleId":"311","severity":1,"message":"329","line":2,"column":16,"nodeType":"313","messageId":"314","endLine":2,"endColumn":23},{"ruleId":"311","severity":1,"message":"325","line":4,"column":8,"nodeType":"313","messageId":"314","endLine":4,"endColumn":16},{"ruleId":"311","severity":1,"message":"327","line":38,"column":9,"nodeType":"313","messageId":"314","endLine":38,"endColumn":13},{"ruleId":"311","severity":1,"message":"330","line":5,"column":8,"nodeType":"313","messageId":"314","endLine":5,"endColumn":28},{"ruleId":"311","severity":1,"message":"331","line":6,"column":19,"nodeType":"313","messageId":"314","endLine":6,"endColumn":28},{"ruleId":"311","severity":1,"message":"327","line":11,"column":9,"nodeType":"313","messageId":"314","endLine":11,"endColumn":13},{"ruleId":"332","severity":1,"message":"333","line":18,"column":9,"nodeType":"334","endLine":24,"endColumn":11},{"ruleId":"311","severity":1,"message":"335","line":8,"column":9,"nodeType":"313","messageId":"314","endLine":8,"endColumn":17},{"ruleId":"311","severity":1,"message":"336","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":25},{"ruleId":"311","severity":1,"message":"337","line":4,"column":8,"nodeType":"313","messageId":"314","endLine":4,"endColumn":14},{"ruleId":"311","severity":1,"message":"338","line":8,"column":8,"nodeType":"313","messageId":"314","endLine":8,"endColumn":18},{"ruleId":"311","severity":1,"message":"339","line":11,"column":8,"nodeType":"313","messageId":"314","endLine":11,"endColumn":12},{"ruleId":"311","severity":1,"message":"340","line":12,"column":8,"nodeType":"313","messageId":"314","endLine":12,"endColumn":11},{"ruleId":"311","severity":1,"message":"341","line":13,"column":8,"nodeType":"313","messageId":"314","endLine":13,"endColumn":11},{"ruleId":"311","severity":1,"message":"342","line":14,"column":8,"nodeType":"313","messageId":"314","endLine":14,"endColumn":12},{"ruleId":"311","severity":1,"message":"343","line":15,"column":8,"nodeType":"313","messageId":"314","endLine":15,"endColumn":13},{"ruleId":"311","severity":1,"message":"344","line":16,"column":8,"nodeType":"313","messageId":"314","endLine":16,"endColumn":17},{"ruleId":"311","severity":1,"message":"345","line":20,"column":8,"nodeType":"313","messageId":"314","endLine":20,"endColumn":25},{"ruleId":"311","severity":1,"message":"346","line":21,"column":8,"nodeType":"313","messageId":"314","endLine":21,"endColumn":22},{"ruleId":"311","severity":1,"message":"347","line":25,"column":8,"nodeType":"313","messageId":"314","endLine":25,"endColumn":33},{"ruleId":"311","severity":1,"message":"348","line":7,"column":8,"nodeType":"313","messageId":"314","endLine":7,"endColumn":18},{"ruleId":"311","severity":1,"message":"349","line":1,"column":22,"nodeType":"313","messageId":"314","endLine":1,"endColumn":31},{"ruleId":"311","severity":1,"message":"350","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":13},{"ruleId":"311","severity":1,"message":"351","line":3,"column":8,"nodeType":"313","messageId":"314","endLine":3,"endColumn":21},{"ruleId":"311","severity":1,"message":"352","line":4,"column":8,"nodeType":"313","messageId":"314","endLine":4,"endColumn":18},{"ruleId":"311","severity":1,"message":"353","line":5,"column":8,"nodeType":"313","messageId":"314","endLine":5,"endColumn":18},{"ruleId":"311","severity":1,"message":"354","line":6,"column":8,"nodeType":"313","messageId":"314","endLine":6,"endColumn":17},{"ruleId":"311","severity":1,"message":"355","line":7,"column":8,"nodeType":"313","messageId":"314","endLine":7,"endColumn":16},{"ruleId":"311","severity":1,"message":"356","line":9,"column":8,"nodeType":"313","messageId":"314","endLine":9,"endColumn":19},{"ruleId":"311","severity":1,"message":"357","line":11,"column":10,"nodeType":"313","messageId":"314","endLine":11,"endColumn":18},{"ruleId":"311","severity":1,"message":"358","line":12,"column":17,"nodeType":"313","messageId":"314","endLine":12,"endColumn":21},{"ruleId":"311","severity":1,"message":"359","line":18,"column":22,"nodeType":"313","messageId":"314","endLine":18,"endColumn":35},{"ruleId":"311","severity":1,"message":"350","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":13},{"ruleId":"311","severity":1,"message":"360","line":9,"column":8,"nodeType":"313","messageId":"314","endLine":9,"endColumn":15},{"ruleId":"311","severity":1,"message":"361","line":11,"column":8,"nodeType":"313","messageId":"314","endLine":11,"endColumn":19},{"ruleId":"311","severity":1,"message":"362","line":18,"column":11,"nodeType":"313","messageId":"314","endLine":18,"endColumn":16},{"ruleId":"363","severity":1,"message":"364","line":70,"column":11,"nodeType":"365","messageId":"366","endLine":70,"endColumn":16},{"ruleId":"367","severity":1,"message":"368","line":11,"column":7,"nodeType":"334","endLine":11,"endColumn":56},{"ruleId":"311","severity":1,"message":"369","line":12,"column":8,"nodeType":"313","messageId":"314","endLine":12,"endColumn":11},{"ruleId":"311","severity":1,"message":"370","line":17,"column":10,"nodeType":"313","messageId":"314","endLine":17,"endColumn":24},{"ruleId":"311","severity":1,"message":"371","line":31,"column":13,"nodeType":"313","messageId":"314","endLine":31,"endColumn":17},{"ruleId":"311","severity":1,"message":"372","line":90,"column":21,"nodeType":"313","messageId":"314","endLine":90,"endColumn":29},{"ruleId":"311","severity":1,"message":"373","line":5,"column":8,"nodeType":"313","messageId":"314","endLine":5,"endColumn":21},{"ruleId":"311","severity":1,"message":"374","line":6,"column":8,"nodeType":"313","messageId":"314","endLine":6,"endColumn":21},{"ruleId":"311","severity":1,"message":"375","line":9,"column":10,"nodeType":"313","messageId":"314","endLine":9,"endColumn":21},{"ruleId":"311","severity":1,"message":"369","line":11,"column":8,"nodeType":"313","messageId":"314","endLine":11,"endColumn":11},{"ruleId":"311","severity":1,"message":"376","line":12,"column":8,"nodeType":"313","messageId":"314","endLine":12,"endColumn":18},{"ruleId":"311","severity":1,"message":"377","line":13,"column":8,"nodeType":"313","messageId":"314","endLine":13,"endColumn":19},{"ruleId":"311","severity":1,"message":"370","line":15,"column":10,"nodeType":"313","messageId":"314","endLine":15,"endColumn":24},{"ruleId":"311","severity":1,"message":"378","line":15,"column":26,"nodeType":"313","messageId":"314","endLine":15,"endColumn":31},{"ruleId":"379","severity":1,"message":"380","line":25,"column":20,"nodeType":"381","messageId":"366","endLine":25,"endColumn":22},{"ruleId":"311","severity":1,"message":"372","line":20,"column":11,"nodeType":"313","messageId":"314","endLine":20,"endColumn":19},{"ruleId":"311","severity":1,"message":"382","line":13,"column":10,"nodeType":"313","messageId":"314","endLine":13,"endColumn":17},{"ruleId":"311","severity":1,"message":"383","line":13,"column":19,"nodeType":"313","messageId":"314","endLine":13,"endColumn":29},{"ruleId":"311","severity":1,"message":"372","line":119,"column":13,"nodeType":"313","messageId":"314","endLine":119,"endColumn":21},{"ruleId":"311","severity":1,"message":"372","line":132,"column":15,"nodeType":"313","messageId":"314","endLine":132,"endColumn":23},{"ruleId":"311","severity":1,"message":"384","line":26,"column":10,"nodeType":"313","messageId":"314","endLine":26,"endColumn":23},{"ruleId":"311","severity":1,"message":"385","line":26,"column":25,"nodeType":"313","messageId":"314","endLine":26,"endColumn":41},{"ruleId":"311","severity":1,"message":"372","line":70,"column":13,"nodeType":"313","messageId":"314","endLine":70,"endColumn":21},{"ruleId":"311","severity":1,"message":"372","line":89,"column":13,"nodeType":"313","messageId":"314","endLine":89,"endColumn":21},{"ruleId":"311","severity":1,"message":"372","line":109,"column":13,"nodeType":"313","messageId":"314","endLine":109,"endColumn":21},{"ruleId":"311","severity":1,"message":"372","line":58,"column":13,"nodeType":"313","messageId":"314","endLine":58,"endColumn":21},{"ruleId":"311","severity":1,"message":"336","line":1,"column":10,"nodeType":"313","messageId":"314","endLine":1,"endColumn":18},{"ruleId":"311","severity":1,"message":"386","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":14},{"ruleId":"311","severity":1,"message":"350","line":4,"column":8,"nodeType":"313","messageId":"314","endLine":4,"endColumn":13},{"ruleId":"311","severity":1,"message":"387","line":1,"column":10,"nodeType":"313","messageId":"314","endLine":1,"endColumn":15},{"ruleId":"311","severity":1,"message":"388","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":17},{"ruleId":"311","severity":1,"message":"389","line":1,"column":36,"nodeType":"313","messageId":"314","endLine":1,"endColumn":46},{"ruleId":"311","severity":1,"message":"390","line":1,"column":48,"nodeType":"313","messageId":"314","endLine":1,"endColumn":53},{"ruleId":"311","severity":1,"message":"391","line":1,"column":55,"nodeType":"313","messageId":"314","endLine":1,"endColumn":60},{"ruleId":"311","severity":1,"message":"392","line":1,"column":62,"nodeType":"313","messageId":"314","endLine":1,"endColumn":71},{"ruleId":"311","severity":1,"message":"393","line":12,"column":8,"nodeType":"313","messageId":"314","endLine":12,"endColumn":18},{"ruleId":"311","severity":1,"message":"394","line":50,"column":10,"nodeType":"313","messageId":"314","endLine":50,"endColumn":18},{"ruleId":"311","severity":1,"message":"395","line":124,"column":9,"nodeType":"313","messageId":"314","endLine":124,"endColumn":22},{"ruleId":"322","severity":1,"message":"396","line":152,"column":6,"nodeType":"397","endLine":152,"endColumn":20,"suggestions":"398"},{"ruleId":"311","severity":1,"message":"399","line":7,"column":3,"nodeType":"313","messageId":"314","endLine":7,"endColumn":9},{"ruleId":"311","severity":1,"message":"373","line":8,"column":3,"nodeType":"313","messageId":"314","endLine":8,"endColumn":16},{"ruleId":"311","severity":1,"message":"400","line":9,"column":3,"nodeType":"313","messageId":"314","endLine":9,"endColumn":20},{"ruleId":"311","severity":1,"message":"401","line":11,"column":3,"nodeType":"313","messageId":"314","endLine":11,"endColumn":8},{"ruleId":"311","severity":1,"message":"392","line":12,"column":3,"nodeType":"313","messageId":"314","endLine":12,"endColumn":12},{"ruleId":"311","severity":1,"message":"374","line":16,"column":3,"nodeType":"313","messageId":"314","endLine":16,"endColumn":16},{"ruleId":"311","severity":1,"message":"402","line":17,"column":3,"nodeType":"313","messageId":"314","endLine":17,"endColumn":14},{"ruleId":"311","severity":1,"message":"377","line":18,"column":3,"nodeType":"313","messageId":"314","endLine":18,"endColumn":14},{"ruleId":"311","severity":1,"message":"403","line":19,"column":3,"nodeType":"313","messageId":"314","endLine":19,"endColumn":12},{"ruleId":"311","severity":1,"message":"404","line":20,"column":3,"nodeType":"313","messageId":"314","endLine":20,"endColumn":13},{"ruleId":"311","severity":1,"message":"405","line":21,"column":3,"nodeType":"313","messageId":"314","endLine":21,"endColumn":14},{"ruleId":"311","severity":1,"message":"406","line":22,"column":3,"nodeType":"313","messageId":"314","endLine":22,"endColumn":8},{"ruleId":"311","severity":1,"message":"407","line":24,"column":10,"nodeType":"313","messageId":"314","endLine":24,"endColumn":13},{"ruleId":"311","severity":1,"message":"408","line":32,"column":10,"nodeType":"313","messageId":"314","endLine":32,"endColumn":20},{"ruleId":"311","severity":1,"message":"409","line":36,"column":10,"nodeType":"313","messageId":"314","endLine":36,"endColumn":14},{"ruleId":"311","severity":1,"message":"410","line":37,"column":10,"nodeType":"313","messageId":"314","endLine":37,"endColumn":21},{"ruleId":"311","severity":1,"message":"411","line":45,"column":9,"nodeType":"313","messageId":"314","endLine":45,"endColumn":20},{"ruleId":"322","severity":1,"message":"412","line":121,"column":6,"nodeType":"397","endLine":121,"endColumn":18,"suggestions":"413"},{"ruleId":"311","severity":1,"message":"414","line":25,"column":17,"nodeType":"313","messageId":"314","endLine":25,"endColumn":32},{"ruleId":"311","severity":1,"message":"415","line":25,"column":51,"nodeType":"313","messageId":"314","endLine":25,"endColumn":63},"no-native-reassign",["416"],"no-negated-in-lhs",["417"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'userItem' is assigned a value but never used.","'SideBarPage' is defined but never used.","'openReset' is assigned a value but never used.","'handleCloseReset' is assigned a value but never used.","'profilePictureUrl' is assigned a value but never used.","'moment' is defined but never used.","'handleEvent' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'events' logical expression could make the dependencies of useEffect Hook (at line 48) change on every render. To fix this, wrap the initialization of 'events' in its own useMemo() Hook.","VariableDeclarator","'PageList' is defined but never used.","'setCurrentSettings' is assigned a value but never used.","'user' is assigned a value but never used.","'Link' is defined but never used.","'NavLink' is defined but never used.","'VideoCameraFrontIcon' is defined but never used.","'matchPath' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'location' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'NewMessage' is defined but never used.","'star' is defined but never used.","'imp' is defined but never used.","'out' is defined but never used.","'inbx' is defined but never used.","'draft' is defined but never used.","'corbeille' is defined but never used.","'FolderSpecialIcon' is defined but never used.","'AutoDeleteIcon' is defined but never used.","'NotificationImportantIcon' is defined but never used.","'SingleChat' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'SideBarButton' is defined but never used.","'SearchChat' is defined but never used.","'ContactInv' is defined but never used.","'noConvers' is defined but never used.","'userIcon' is defined but never used.","'ContactLink' is defined but never used.","'useQuery' is defined but never used.","'memo' is defined but never used.","'setFetchAgain' is assigned a value but never used.","'ChatBox' is defined but never used.","'ChatContext' is defined but never used.","'chats' is assigned a value but never used.","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Box' is defined but never used.","'ToastContainer' is defined but never used.","'resp' is assigned a value but never used.","'response' is assigned a value but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'useMutation' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'selectedEmail' is assigned a value but never used.","'setSelectedEmail' is assigned a value but never used.","'search' is defined but never used.","'Image' is defined but never used.","'CloseIcon' is defined but never used.","'IconButton' is defined but never used.","'Input' is defined but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'Newmessage' is defined but never used.","'istyping' is assigned a value but never used.","'typingHandler' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.","ArrayExpression",["418"],"'Dialog' is defined but never used.","'DialogContentText' is defined but never used.","'Modal' is defined but never used.","'DialogTitle' is defined but never used.","'FormLabel' is defined but never used.","'ModalClose' is defined but never used.","'ModalDialog' is defined but never used.","'Stack' is defined but never used.","'Add' is defined but never used.","'loggedUser' is assigned a value but never used.","'open' is assigned a value but never used.","'loadingChat' is assigned a value but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.",["419"],"'setSelectedChat' is assigned a value but never used.","'selectedChat' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"424","text":"425"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"426","text":"427"},[4089,4103],"[fetchMessages, selectedChat]",[2830,2842],"[fetchAgain, fetchChats]"]